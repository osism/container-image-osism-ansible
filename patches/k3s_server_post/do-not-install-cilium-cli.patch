--- a/tasks/cilium.yml
+++ b/tasks/cilium.yml
@@ -2,105 +2,14 @@
 - name: Prepare Cilium CLI on first master and deploy CNI
   when: ansible_hostname == hostvars[groups[group_name_master | default('master')][0]]['ansible_hostname']
   run_once: true
+  delegate_to: localhost
   block:
     - name: Create tmp directory on first master
       ansible.builtin.file:
         path: /tmp/k3s
         state: directory
-        owner: root
-        group: root
         mode: "0755"
 
-    - name: Check if Cilium CLI is installed
-      ansible.builtin.command: cilium version
-      register: cilium_cli_installed
-      failed_when: false
-      changed_when: false
-      ignore_errors: true
-
-    - name: Check for Cilium CLI version in command output
-      ansible.builtin.set_fact:
-        installed_cli_version: >-
-          {{
-            cilium_cli_installed.stdout_lines
-            | join(' ')
-            | regex_findall('cilium-cli: (v\d+\.\d+\.\d+)')
-            | first
-            | default('unknown')
-          }}
-      when: cilium_cli_installed.rc == 0
-
-    - name: Get latest stable Cilium CLI version file
-      ansible.builtin.get_url:
-        url: https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt
-        dest: /tmp/k3s/cilium-cli-stable.txt
-        owner: root
-        group: root
-        mode: "0755"
-
-    - name: Read Cilium CLI stable version from file
-      ansible.builtin.command: cat /tmp/k3s/cilium-cli-stable.txt
-      register: cli_ver
-      changed_when: false
-
-    - name: Log installed Cilium CLI version
-      ansible.builtin.debug:
-        msg: "Installed Cilium CLI version: {{ installed_cli_version | default('Not installed') }}"
-
-    - name: Log latest stable Cilium CLI version
-      ansible.builtin.debug:
-        msg: "Latest Cilium CLI version: {{ cli_ver.stdout }}"
-
-    - name: Determine if Cilium CLI needs installation or update
-      ansible.builtin.set_fact:
-        cilium_cli_needs_update: >-
-          {{
-            cilium_cli_installed.rc != 0 or
-            (cilium_cli_installed.rc == 0 and
-            installed_cli_version != cli_ver.stdout)
-          }}
-
-    - name: Install or update Cilium CLI
-      when: cilium_cli_needs_update
-      block:
-        - name: Set architecture variable
-          ansible.builtin.set_fact:
-            cli_arch: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"
-
-        - name: Download Cilium CLI and checksum
-          ansible.builtin.get_url:
-            url: "{{ cilium_base_url }}/cilium-linux-{{ cli_arch }}{{ item }}"
-            dest: /tmp/k3s/cilium-linux-{{ cli_arch }}{{ item }}
-            owner: root
-            group: root
-            mode: "0755"
-          loop:
-            - .tar.gz
-            - .tar.gz.sha256sum
-          vars:
-            cilium_base_url: https://github.com/cilium/cilium-cli/releases/download/{{ cli_ver.stdout }}
-
-        - name: Verify the downloaded tarball
-          ansible.builtin.shell: |
-            cd /tmp/k3s && sha256sum --check cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
-          args:
-            executable: /bin/bash
-          changed_when: false
-
-        - name: Extract Cilium CLI to /usr/local/bin
-          ansible.builtin.unarchive:
-            src: /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz
-            dest: /usr/local/bin
-            remote_src: true
-
-        - name: Remove downloaded tarball and checksum file
-          ansible.builtin.file:
-            path: "{{ item }}"
-            state: absent
-          loop:
-            - /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz
-            - /tmp/k3s/cilium-linux-{{ cli_arch }}.tar.gz.sha256sum
-
     - name: Wait for connectivity to kube VIP
       ansible.builtin.command: ping -c 1 {{ apiserver_endpoint }}
       register: ping_result
@@ -116,7 +25,7 @@
       when: ping_result.rc != 0
 
     - name: Test for existing Cilium install
-      ansible.builtin.command: k3s kubectl -n kube-system get daemonsets cilium
+      ansible.builtin.command: kubectl -n kube-system get daemonsets cilium
       register: cilium_installed
       failed_when: false
       changed_when: false
@@ -184,7 +93,7 @@
         --helm-set bpf.loadBalancer.mode={{ bpf_lb_mode }}
         {% endif %}
       environment:
-        KUBECONFIG: "{{ ansible_user_dir }}/.kube/config"
+        KUBECONFIG: /share/kubeconfig
       register: cilium_install_result
       changed_when: cilium_install_result.rc == 0
       when: cilium_installed.rc != 0 or cilium_needs_update
@@ -192,12 +101,12 @@
     - name: Wait for Cilium resources
       ansible.builtin.command: >-
         {% if item.type == 'daemonset' %}
-        k3s kubectl wait pods
+        kubectl wait pods
         --namespace=kube-system
         --selector='k8s-app=cilium'
         --for=condition=Ready
         {% else %}
-        k3s kubectl wait {{ item.type }}/{{ item.name }}
+        kubectl wait {{ item.type }}/{{ item.name }}
         --namespace=kube-system
         --for=condition=Available
         {% endif %}
@@ -244,8 +153,8 @@
         - name: Test for BGP config resources
           ansible.builtin.command: "{{ item }}"
           loop:
-            - k3s kubectl get CiliumBGPPeeringPolicy.cilium.io
-            - k3s kubectl get CiliumLoadBalancerIPPool.cilium.io
+            - kubectl get CiliumBGPPeeringPolicy.cilium.io
+            - kubectl get CiliumLoadBalancerIPPool.cilium.io
           changed_when: false
           loop_control:
             label: "{{ item }}"
