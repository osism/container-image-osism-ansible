---
- name: Build osism-ansible image
  hosts: all

  vars:
    python_venv_dir: /tmp/venv

  environment:
    registry: "{{ docker_registry | default('osism.harbor.regio.digital') }}"
    repository: "{{ docker_namespace | default('osism') }}/osism-ansible"
    version: "{{ zuul['tag'] | default('latest') }}"
    DTRACK_SERVER: "https://dtrack.osism.tech"
    DTRACK_API_KEY: "{{ secret.DTRACK_API_KEY | default('') }}"

  tasks:
    - name: Log into registry
      community.docker.docker_login:
        registry_url: "{{ docker_registry }}"
        username: "{{ secret.DOCKER_USERNAME }}"
        password: "{{ secret.DOCKER_PASSWORD }}"
      when: push_image | default(false) | bool
      no_log: true

    - name: Run build script
      ansible.builtin.shell:
        executable: /bin/bash
        chdir: "{{ zuul.project.src_dir | default('.') }}"
        cmd: |
          set -e
          set -o pipefail
          set -x

          # This is a way to use this job also in other repositories
          # (osism/cfg-generics, osism/defaults, ..). The assumption
          # is that if no Containerfile is available, the job was executed
          # from one of the other repositories. There are probably more
          # elegant ways to solve this, but it is good enough for now.
          if [[ ! -e Containerfile ]]; then
              git clone https://github.com/osism/container-image-osism-ansible.git container-image
              pushd container-image
          fi

          created=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          revision=$(git rev-parse --short HEAD)

          if [[ -n $registry ]]; then
              repository="$registry/$repository"
          fi

          docker buildx build \
              --build-arg "VERSION=$version" \
              --label "org.opencontainers.image.created=$created" \
              --label "org.opencontainers.image.documentation=https://osism.tech/docs/" \
              --label "org.opencontainers.image.licenses=ASL 2.0" \
              --label "org.opencontainers.image.revision=$revision" \
              --label "org.opencontainers.image.source=https://github.com/osism/container-image-osism-ansible" \
              --label "org.opencontainers.image.title=osism-ansible" \
              --label "org.opencontainers.image.url=https://quay.io/organization/osism" \
              --label "org.opencontainers.image.vendor=OSISM GmbH" \
              --label "org.opencontainers.image.version=$version" \
              --load \
              --tag "$revision" \
              .  # <-- there is a dot
      changed_when: true

    - name: Run push script
      ansible.builtin.shell:
        executable: /bin/bash
        chdir: "{{ zuul.project.src_dir | default('.') }}"
        cmd: |
          set -e
          set -o pipefail
          set -x

          # If the way described above is used, we must first change to
          # the container-image directory to obtain the correct revision.
          if [[ ! -e Containerfile ]]; then
              pushd container-image
          fi

          revision=$(git rev-parse --short HEAD)

          if [[ -n $registry ]]; then
              repository="$registry/$repository"
          fi

          docker tag "$revision" "$repository:$version"
          docker push "$repository:$version"
      when: push_image | default(false) | bool
      changed_when: true

    - name: Run sbom script
      ansible.builtin.shell:
        executable: /bin/bash
        chdir: "{{ zuul.project.src_dir | default('.') }}"
        cmd: |
          set -e
          set -o pipefail
          set -x

          if [[ -n $registry ]]; then
              repository="$registry/$repository"
          fi

          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
          /usr/local/bin/syft scan "$repository:$version" -o cyclonedx-json > sbom.json
          {{ python_venv_dir }}/bin/dtrackauditor \
            -p osism-ansible \
            -v "$version" \
            -f sbom.json \
            -a
      when: push_sbom | default(false) | bool
      changed_when: true
